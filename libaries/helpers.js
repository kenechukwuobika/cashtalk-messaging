const AutoGeneratedCodeSetting = require('../models/itemVariantInventory/AutoGeneratedCodeSetting');
const moment = require('moment-timezone');

let randomString = function (string_length) {
    // let chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
    let chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ";
    let randomstring = '';
    for (let i=0; i<string_length; i++) {
        let rnum = Math.floor(Math.random() * chars.length);
        randomstring += chars.substring(rnum,rnum+1);
    }
    return randomstring;
};

let ifEmpty = function (data) {
    if(typeof(data) === 'number' || typeof(data) === 'boolean')
    {
        return false;
    }
    if(typeof(data) === 'undefined' || data === null || data === 'null')
    {
        return true;
    }
    if(typeof(data.length) !== 'undefined')
    {
        if(/^[\s]*$/.test(data.toString()))
        {
            return true;
        }
        return data.length === 0;
    }
    let  count = 0;
    for(let i in data)
    {
        if(data.hasOwnProperty(i))
        {
            count ++;
        }
    }
    return count === 0;
};

let paginationLinks = function (path,currentUrl,total,page,limit) {
    // let total = result.count;

    let lastPage = Math.ceil(total / limit);
    let nextPage = parseInt(page)+1;
    let prevPage = page-1;
    let from = (prevPage * limit)+1;
    let to = (total < limit) ? total : (nextPage * limit) - limit;
    if(prevPage < 1 ){ prevPage = null }
    if(nextPage > lastPage){ nextPage = null }

    // let path = `${req.protocol}://${req.get('host')}${req.baseUrl}/task/all/`;
    let firstPageUrl = `${path}?pageNo=1&noOfRows=${limit}`;
    let lastPageUrl = `${path}?pageNo=${lastPage}&noOfRows=${limit}`;
    let nextPageUrl = (nextPage == null) ? null : `${path}?pageNo=${nextPage}&noOfRows=${limit}`;
    let prevPageUrl = (prevPage == null) ? null : `${path}?pageNo=${prevPage}&noOfRows=${limit}`;

    return {

        firstPageUrl,
        lastPageUrl,
        nextPageUrl,
        prevPageUrl,
        // self:req.protocol + '://' + req.get('host') + req.originalUrl,
        self: currentUrl,
        meta: {
            total,
            lastPage,
            nextPage,
            prevPage,
            from,
            to
        }
    };
};

// function to convert coins like kobo in integer to currency format.
// Amount passed has to be in whole number i.e in its subunits, like kobo, cents, penny...
// amount: integer, sign: string ($)
let moneyFormat = function (amount, sign) {
    // This converts the amount from subunits(kobo) to it main unit (naira)
    amount = amount/Math.pow(10,2);

    // This rounds the amount to 2 decimal points
    const pieces = parseFloat(amount).toFixed(2).split('');

    // This splits the amount to three groups and adds comma and full stop
    let piecesCount = pieces.length - 3;
    while ((piecesCount-=3) > 0) {
        pieces.splice(piecesCount, 0, ',');
    }
    // Adds the currency and returns the full amount.
    return sign + pieces.join('')
};

/**
 * @function generateCode - To generate random code based on a preset setting.
 * @param {string} module
 * @param {uuid} orgId
 * @param {string} yearOfBirth
 * @param {string} contactName
 * @param {string} moduleName
 * @return {string} code
 * */
async function generateCode (orgId,module,{yearOfBirth,contactName,moduleName,productName}) {
    const codeSetting = await AutoGeneratedCodeSetting.findOne({where:{orgId,moduleName:module}});
    const {setting} = codeSetting;
    if(!setting) {
        return "Settings not found.";
    }
    let {prefix,suffix,roots,separator} = setting.codeFormat;
    // console.log(prefix);
    // console.log(root);
    // console.log(suffix);
    // console.log(separator);
    // let configs = [
    //     {position: 'prefix', type:prefix.type, typeFormat:prefix.typeFormat},
    //     {position: 'root', type:root.type, typeFormat:root.typeFormat},
    //     {position: 'suffix', type:suffix.type,typeFormat:suffix.typeFormat}
    // ];

    let configs = [];

    // This is to set order of operation for prefix, root and suffix.
    configs.push({position: 'prefix', type:prefix.type, typeFormat:prefix.typeFormat});
    for (let root of roots) {
        configs.push({position: 'root', type:root.type, typeFormat:root.typeFormat});
    }
    configs.push({position: 'suffix', type:suffix.type,typeFormat:suffix.typeFormat});
    // console.log(configs);
    let codes = [];
    for (let config of configs) {
        const {position,type,typeFormat} = config;
        if (type === 'issuingAuthority') {

            codes.push(typeFormat);

        } else if (type === 'randomCode') {

            codes.push(generateRandomCode(typeFormat,6));

        } else if (type === 'currentDate') {

            if (separator.type === 'slash') {
                codes.push(moment().format('L'));
            } else if (separator.type === 'hyphen') {
                codes.push(moment().format('YYYY-MM-DD'));
            } else if (separator.type === 'noSeparator') {
                let dateInArrays = moment().format('YYYY-MM-DD').split('/');
                let dateString = '';
                for (let dateInArray of dateInArrays) {
                    dateString += dateInArray;
                }
                codes.push(dateString);
            }

        } else if (type === 'yearOfBirth') {
            codes.push(yearOfBirth);
        } else if (type === 'contactName') {
            codes.push(contactName);
        } else if (type === 'productName') {
            codes.push(productName);
        } else if (type === 'moduleName') {
            codes.push(typeFormat);
        } else if (type === 'currentYear') {
            if (typeFormat === 'yy') {
                codes.push(moment().format('YY'));
            } else if (typeFormat === 'yyyy') {
                codes.push(moment().format('YYYY'));
            }
        }
    }
    // console.log(codes);
    return formatCode(codes,separator.type);
}

/**
 * @function formatCode - To format an array of codes based on the required separator.
 * @param {array} codes
 * @param {string} separator
 * @return {string} code
 * @example - if codes = ['hello','world','today'] and separator = 'hyphen']
 * result = 'hello-world-today'
 * */
function formatCode(codes,separator) {
    let result = null;
    let symbol = '';
    if(separator === 'slash') {
        symbol = '/';
    } else if (separator === 'hyphen') {
        symbol = '-';
    } else if (separator === 'noSeparator') {
        symbol = '';
    }
    for (let code of codes) {
        if(result !== null) {
            result += `${symbol}${code}`;
        } else {
            result = code;
        }
    }
    // console.log('result: '+result);
    // console.log(symbol);
    // console.log(separator);
    return result;
}

/**
 * @function generateRandomCode - To generate a random code from.
 * @param {string} type - either numeric, alphanumeric or alphabet
 * @param {number} length
 * @return {string} code
 * */
function generateRandomCode (type,length) {
    let numeric = '0123456789';
    let alphanumeric = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ';
    let alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXTZ';
    let chars = '';
    if (type === 'numeric') {
        chars = numeric;
    } else if (type === 'alphanumeric') {
        chars = alphanumeric;
    } else if (type === 'alphabet') {
        chars = alphabet;
    }
    let code = '';
    for (let i=0; i<length; i++) {
        let randNum = Math.floor(Math.random() * chars.length);
        code += chars.substring(randNum,randNum+1);
    }
    return code;
}

module.exports = {randomString,ifEmpty,paginationLinks,generateCode};
